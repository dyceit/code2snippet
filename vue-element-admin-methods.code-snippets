{
  "pagination method": {
    "prefix": "l-method__pagination",
    "body": [
      "handlePagination(val) {",
      "this.query.limit = val.limit",
      "this.query.page = val.page",
      "${1}",
      "},${0}"
    ]
  },
  "handle method ": {
    "prefix": "l-method__handleDownload",
    "body": [
      "handleDownload() {",
      "\t import('vendor/Export2Excel').then(({export_json_to_excel})=>{",
      "\t\t this.downloadLoading = true",
      "\t\t const tHeader = []",
      "\t\t const filterVal = []",
      "\t\t const query = {...this.query,cursor:1,limit:10000}",
      "\t\t ${1}(query).then(res => {",
      "\t\t\t const list = res.data.items",
      "\t\t\t const data = this.formatJson(filterVal, list)",
      "\t\t\t this.downloadLoading = false",
      "\t\t\t export_json_to_excel(tHeader, data, '${2}列表')",
      "\t\t  })",
      "\t })",
      "},",
      "formatJson(filterVal, jsonData) {",
      "\t return jsonData.map(v => filterVal.map(j => {",
      "\t\t return v[j]",
      "\t }))",
      "},"
    ]
  },
  "handle copy method": {
    "prefix": "l-method__paste",
    "body": [
      "handlePaste(inputVal) {",
      "\t const inputValTrim = inputVal.trim()",
      "\t return inputValTrim..split(/[,，\\r\\n]+/g)",
      "\t\t .map(val => {",
      "\t\t  return val.trim()",
      "\t })",
      "}"
    ]
  }
}
